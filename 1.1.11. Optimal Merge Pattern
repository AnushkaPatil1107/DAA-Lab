#include <stdio.h>
#include <stdlib.h>

// Function to Sort the files in ascending order, perform optimal file merging and return the minimum cost
int optimalMerge(int files[], int n) {
    int totalCost = 0;
    
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (files[j] > files[j + 1]) {
                int temp = files[j];
                files[j] = files[j + 1];
                files[j + 1] = temp;
            }
        }
    }
    
    for (int i = 0; i < n - 1; i++) {
        int merge = files[0] + files[1];
        totalCost += merge;
        
        int remaining = n - i - 1;
        
        for (int j = 1; j < remaining; j++) {
            files[j - 1] = files[j + 1];
        }
        
        int pos = 0;
        while (pos < remaining - 1 && files[pos] < merge) {
            pos++;
        }
        
        for (int j = remaining - 1; j > pos; j--) {
            files[j] = files[j - 1];
        }
        
        files[pos] = merge;
    }
    
    return totalCost;
}

int main() {
    int n;
    printf("Number of files: ");
    scanf("%d", &n);
    int *files = (int *)malloc(n * sizeof(int));
    printf("Enter the sizes of %d files: ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &files[i]);
    }
    int minCost = optimalMerge(files, n);
    printf("Minimum cost of merging is: %d\n", minCost);
    free(files);
    return 0;
}
